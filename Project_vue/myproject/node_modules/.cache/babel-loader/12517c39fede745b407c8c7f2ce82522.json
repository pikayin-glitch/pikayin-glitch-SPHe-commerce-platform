{"ast":null,"code":"// 对axios进行二次封装\nimport axios from \"axios\"; // 引入进度条\n\nimport nprogress from \"nprogress\"; // start 开始 done结束\n\nimport \"nprogress/nprogress.css\"; // 引入样式\n// 利用axios对象的方法create,去创建一个axios实例\n\nconst requests = axios.create({\n  // 基础路径.路径中会出现api\n  baseURL: \"/api\",\n  // 请求超时的时间\n  timeout: 5000\n}); // 请求拦截器,拦截请求,在请求发出前执行\n\nrequests.interceptors.request.use(config => {\n  // cohfig:[配置对象,对象里面有一个属性很重要,header请求头\n  nprogress.start();\n  return config;\n}); // 响应拦截器\n\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数,服务器数据回来时开源检测到\n  nprogress.done();\n  return res.data;\n}, error => {\n  // 响应失败\n  return Promise.reject(new error('faile'));\n});\nexport default requests;","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Project_vue/myproject/src/api/requests.js"],"names":["axios","nprogress","requests","create","baseURL","timeout","interceptors","request","use","config","start","response","res","done","data","error","Promise","reject"],"mappings":"AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAO,yBAAP,C,CACA;AAEA;;AAEA,MAAMC,QAAQ,GAACF,KAAK,CAACG,MAAN,CAAa;AACxB;AACAC,EAAAA,OAAO,EAAC,MAFgB;AAGxB;AACAC,EAAAA,OAAO,EAAC;AAJgB,CAAb,CAAf,C,CAOA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAU;AACxC;AACAR,EAAAA,SAAS,CAACS,KAAV;AACA,SAAOD,MAAP;AACH,CAJD,E,CAMA;;AACAP,QAAQ,CAACI,YAAT,CAAsBK,QAAtB,CAA+BH,GAA/B,CAAoCI,GAAD,IAAO;AACtC;AACAX,EAAAA,SAAS,CAACY,IAAV;AACA,SAAOD,GAAG,CAACE,IAAX;AACH,CAJD,EAIGC,KAAD,IAAS;AACP;AACA,SAAOC,OAAO,CAACC,MAAR,CAAe,IAAIF,KAAJ,CAAU,OAAV,CAAf,CAAP;AACH,CAPD;AASA,eAAeb,QAAf","sourcesContent":["\r\n// 对axios进行二次封装\r\n\r\nimport axios from \"axios\";\r\n// 引入进度条\r\nimport nprogress from \"nprogress\";\r\n// start 开始 done结束\r\nimport \"nprogress/nprogress.css\"\r\n// 引入样式\r\n\r\n// 利用axios对象的方法create,去创建一个axios实例\r\n\r\nconst requests=axios.create({\r\n    // 基础路径.路径中会出现api\r\n    baseURL:\"/api\",\r\n    // 请求超时的时间\r\n    timeout:5000,\r\n});\r\n\r\n// 请求拦截器,拦截请求,在请求发出前执行\r\nrequests.interceptors.request.use((config)=>{\r\n    // cohfig:[配置对象,对象里面有一个属性很重要,header请求头\r\n    nprogress.start();\r\n    return config\r\n})\r\n\r\n// 响应拦截器\r\nrequests.interceptors.response.use((res)=>{\r\n    // 成功的回调函数,服务器数据回来时开源检测到\r\n    nprogress.done();\r\n    return res.data;\r\n},(error)=>{\r\n    // 响应失败\r\n    return Promise.reject(new error('faile'))\r\n})\r\n\r\nexport default requests"]},"metadata":{},"sourceType":"module"}