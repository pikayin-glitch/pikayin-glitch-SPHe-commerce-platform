{"ast":null,"code":"//对于axios进行二次封装\nimport axios from \"axios\";\nimport nprogress from \"nprogress\"; //在当前模块中引入store\n\nimport store from '@/store'; //如果出现进度条没有显示：一定是你忘记了引入样式了\n\nimport \"nprogress/nprogress.css\"; //底下的代码也是创建axios实例\n\nvar requests = axios.create({\n  //基础路径\n  baseURL: \"/api\",\n  //请求不能超过5S\n  timeout: 5000\n}); //请求拦截器----在项目中发请求（请求没有发出去）可以做一些事情\n\nrequests.interceptors.request.use(function (config) {\n  //现在的问题是config是什么?配置对象\n  //可以让进度条开始动\n  if (store.state.detail.uuid_token) {\n    //请求头添加一个字段(userTempId):和后台老师商量好了\n    config.headers.userTempId = store.state.detail.uuid_token;\n  } //需要携带token带给服务器\n\n\n  if (store.state.user.token) {\n    config.headers.token = store.state.user.token;\n  }\n\n  nprogress.start();\n  return config;\n}); //响应拦截器----当服务器手动请求之后，做出响应（相应成功）会执行的\n\nrequests.interceptors.response.use(function (res) {\n  //进度条结束\n  nprogress.done(); //相应成功做的事情\n\n  return res.data;\n}, function (err) {\n  alert(\"服务器响应数据失败\");\n}); //最终需要对外暴露（不对外暴露外面模块没办法使用）\n//这里的代码是暴露一个axios实例\n\nexport default requests;","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Vue_project/Project_vue/myproject/src/api/ajax.js"],"names":["axios","nprogress","store","requests","create","baseURL","timeout","interceptors","request","use","config","state","detail","uuid_token","headers","userTempId","user","token","start","response","res","done","data","err","alert"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAO,yBAAP,C,CACA;;AACA,IAAIC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1B;AACAC,EAAAA,OAAO,EAAE,MAFiB;AAG1B;AACAC,EAAAA,OAAO,EAAE;AAJiB,CAAb,CAAf,C,CAOA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAACC,MAAD,EAAY;AAC5C;AACA;AACA,MAAGR,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBC,UAAtB,EAAiC;AAC/B;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeC,UAAf,GAA4Bb,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBC,UAA/C;AACD,GAN2C,CAO5C;;;AACA,MAAGX,KAAK,CAACS,KAAN,CAAYK,IAAZ,CAAiBC,KAApB,EAA0B;AACxBP,IAAAA,MAAM,CAACI,OAAP,CAAeG,KAAf,GAAuBf,KAAK,CAACS,KAAN,CAAYK,IAAZ,CAAiBC,KAAxC;AACD;;AACDhB,EAAAA,SAAS,CAACiB,KAAV;AACA,SAAOR,MAAP;AACD,CAbD,E,CAeA;;AACAP,QAAQ,CAACI,YAAT,CAAsBY,QAAtB,CAA+BV,GAA/B,CACE,UAACW,GAAD,EAAS;AACP;AACAnB,EAAAA,SAAS,CAACoB,IAAV,GAFO,CAGP;;AACA,SAAOD,GAAG,CAACE,IAAX;AACD,CANH,EAOE,UAACC,GAAD,EAAS;AACPC,EAAAA,KAAK,CAAC,WAAD,CAAL;AACD,CATH,E,CAWA;AACA;;AACA,eAAerB,QAAf","sourcesContent":["//对于axios进行二次封装\nimport axios from \"axios\";\nimport nprogress from \"nprogress\";\n//在当前模块中引入store\nimport store from '@/store';\n//如果出现进度条没有显示：一定是你忘记了引入样式了\nimport \"nprogress/nprogress.css\";\n//底下的代码也是创建axios实例\nlet requests = axios.create({\n  //基础路径\n  baseURL: \"/api\",\n  //请求不能超过5S\n  timeout: 5000,\n});\n\n//请求拦截器----在项目中发请求（请求没有发出去）可以做一些事情\nrequests.interceptors.request.use((config) => {\n  //现在的问题是config是什么?配置对象\n  //可以让进度条开始动\n  if(store.state.detail.uuid_token){\n    //请求头添加一个字段(userTempId):和后台老师商量好了\n    config.headers.userTempId = store.state.detail.uuid_token;\n  }\n  //需要携带token带给服务器\n  if(store.state.user.token){\n    config.headers.token = store.state.user.token;\n  }\n  nprogress.start();\n  return config;\n});\n\n//响应拦截器----当服务器手动请求之后，做出响应（相应成功）会执行的\nrequests.interceptors.response.use(\n  (res) => {\n    //进度条结束\n    nprogress.done();\n    //相应成功做的事情\n    return res.data;\n  },\n  (err) => {\n    alert(\"服务器响应数据失败\");\n  }\n);\n//最终需要对外暴露（不对外暴露外面模块没办法使用）\n//这里的代码是暴露一个axios实例\nexport default requests;\n"]},"metadata":{},"sourceType":"module"}