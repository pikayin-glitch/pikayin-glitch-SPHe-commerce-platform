{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/\\u5C39\\u6728\\u661F\\u8FB0/Desktop/Vue_project/Project_vue/myproject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nvar state = {\n  cartList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n};\nvar actions = {\n  //获取购物车列表数据\n  getCartList: function getCartList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCartList();\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit(\"GETCARTLIST\", result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //删除购物车某一个产品\n  deleteCartListBySkuId: function deleteCartListBySkuId(_ref2, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", \"ok\");\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error(\"faile\")));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  //修改购物车某一个产品的选中状态\n  updateCheckedById: function updateCheckedById(_ref3, _ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, skuId, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuId = _ref4.skuId, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedByid(skuId, isChecked);\n\n            case 4:\n              result = _context3.sent;\n\n              if (!(result.code == 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", \"ok\");\n\n            case 9:\n              return _context3.abrupt(\"return\", Promise.reject(new Error(\"faile\")));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  //删除全部勾选的产品\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var dispatch = _ref5.dispatch,\n        getters = _ref5.getters;\n    //context:小仓库，commit【提交mutations修改state】 getters【计算属性】 dispatch【派发action】 state【当前仓库数据】\n    //获取购物车中全部的产品（是一个数组）\n    var PromiseAll = [];\n    getters.cartList.cartInfoList.forEach(function (item) {\n      var promise = item.isChecked == 1 ? dispatch(\"deleteCartListBySkuId\", item.skuId) : \"\"; //将每一次返回的Promise添加到数组当中\n\n      PromiseAll.push(promise);\n    }); //只要全部的p1|p2....都成功，返回结果即为成功\n    //如果有一个失败，返回即为失败结果\n\n    return Promise.all(PromiseAll);\n  },\n  //修改全部产品的状态\n  updateAllCartIsChecked: function updateAllCartIsChecked(_ref6, isChecked) {\n    var dispatch = _ref6.dispatch,\n        state = _ref6.state;\n    //数组\n    var promiseAll = [];\n    state.cartList[0].cartInfoList.forEach(function (item) {\n      var promise = dispatch(\"updateCheckedById\", {\n        skuId: item.skuId,\n        isChecked: isChecked\n      });\n      promiseAll.push(promise);\n    }); //最终返回结果\n\n    return Promise.all(promiseAll);\n  }\n};\nvar getters = {\n  cartList: function cartList(state) {\n    return state.cartList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Vue_project/Project_vue/myproject/src/store/shopcart.js"],"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedByid","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartListBySkuId","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","dispatch","getters","PromiseAll","cartInfoList","forEach","item","promise","push","all","updateAllCartIsChecked","promiseAll"],"mappings":"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","sourcesContent":["import { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nconst state = {\n  cartList: [],\n};\nconst mutations = {\n  GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  },\n};\nconst actions = {\n  //获取购物车列表数据\n  async getCartList({ commit }) {\n    let result = await reqCartList();\n    if (result.code == 200) {\n      commit(\"GETCARTLIST\", result.data);\n    }\n  },\n  //删除购物车某一个产品\n  async deleteCartListBySkuId({ commit }, skuId) {\n    let result = await reqDeleteCartById(skuId);\n    if (result.code == 200) {\n      return \"ok\";\n    } else {\n      return Promise.reject(new Error(\"faile\"));\n    }\n  },\n  //修改购物车某一个产品的选中状态\n  async updateCheckedById({ commit }, { skuId, isChecked }) {\n    let result = await reqUpdateCheckedByid(skuId, isChecked);\n    if (result.code == 200) {\n      return \"ok\";\n    } else {\n      return Promise.reject(new Error(\"faile\"));\n    }\n  },\n  //删除全部勾选的产品\n  deleteAllCheckedCart({ dispatch, getters }) {\n    //context:小仓库，commit【提交mutations修改state】 getters【计算属性】 dispatch【派发action】 state【当前仓库数据】\n    //获取购物车中全部的产品（是一个数组）\n    let PromiseAll = [];\n    getters.cartList.cartInfoList.forEach((item) => {\n      let promise =\n        item.isChecked == 1\n          ? dispatch(\"deleteCartListBySkuId\", item.skuId)\n          : \"\";\n      //将每一次返回的Promise添加到数组当中\n      PromiseAll.push(promise);\n    });\n    //只要全部的p1|p2....都成功，返回结果即为成功\n    //如果有一个失败，返回即为失败结果\n    return Promise.all(PromiseAll);\n  },\n  //修改全部产品的状态\n  updateAllCartIsChecked({ dispatch, state }, isChecked) {\n    //数组\n    let promiseAll = [];\n    state.cartList[0].cartInfoList.forEach((item) => {\n      let promise = dispatch(\"updateCheckedById\", {\n        skuId: item.skuId,\n        isChecked,\n      });\n      promiseAll.push(promise);\n    });\n    //最终返回结果\n    return Promise.all(promiseAll);\n  },\n};\nconst getters = {\n  cartList(state) {\n    return state.cartList[0] || {};\n  },\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]},"metadata":{},"sourceType":"module"}