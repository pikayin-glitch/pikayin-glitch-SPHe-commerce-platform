{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/\\u5C39\\u6728\\u661F\\u8FB0/Desktop/Vue_project/Project_vue/myproject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.function.name.js\";\n//引入vue-router路由插件\nimport VueRouter from \"vue-router\"; //引入Vue\n\nimport Vue from \"vue\";\nimport routes from \"./routes\"; //使用插件\n\nVue.use(VueRouter); //引入store\n\nimport store from \"@/store\"; //需要重写VueRouter.prototype原型对象身上的push|replace方法\n//先把VueRouter.prototype身上的push|replace方法进行保存一份\n\nvar originPush = VueRouter.prototype.push;\nvar originReplace = VueRouter.prototype.replace; //重写VueRouter.prototype身上的push方法了\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n  //第一个形参：路由跳转的配置对象（query|params）\n  //第二个参数：undefined|箭头函数（成功的回调）\n  //第三个参数:undefined|箭头函数（失败的回调）\n  if (resolve && reject) {\n    //push方法传递第二个参数|第三个参数（箭头函数）\n    //originPush：利用call修改上下文，变为(路由组件.$router)这个对象，第二参数：配置对象、第三、第四个参数：成功和失败回调函数\n    originPush.call(this, location, resolve, reject);\n  } else {\n    //push方法没有产地第二个参数|第三个参数\n    originPush.call(this, location, function () {}, function () {});\n  }\n}; //重写VueRouter.prototype身上的replace方法了\n\n\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, function () {}, function () {});\n  }\n}; //对外暴露VueRouter类的实例\n\n\nvar router = new VueRouter({\n  //配置路由\n  //第一:路径的前面需要有/(不是二级路由)\n  //路径中单词都是小写的\n  //component右侧V别给我加单引号【字符串：组件是对象（VueComponent类的实例）】\n  routes: routes,\n  //滚动行为\n  scrollBehavior: function scrollBehavior(to, from, savedPosition) {\n    //返回的这个y=0，代表的滚动条在最上方\n    return {\n      y: 0\n    };\n  }\n}); //全局守卫：前置守卫（在路由跳转之间进行判断）\n\nrouter.beforeEach( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var token, name, toPath;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //to:获取到要跳转到的路由信息\n            //from：获取到从哪个路由跳转过来来的信息\n            //next: next() 放行  next(path) 放行  \n            //方便测试 统一放行\n            //  next();\n            //获取仓库中的token-----可以确定用户是登录了\n            token = store.state.user.token;\n            name = store.state.user.userInfo.name; //用户登录了\n\n            if (!token) {\n              _context.next = 24;\n              break;\n            }\n\n            if (!(to.path == \"/login\" || to.path == '/register')) {\n              _context.next = 7;\n              break;\n            }\n\n            next('/');\n            _context.next = 22;\n            break;\n\n          case 7:\n            if (!name) {\n              _context.next = 11;\n              break;\n            }\n\n            next();\n            _context.next = 22;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return store.dispatch('getUserInfo');\n\n          case 14:\n            next();\n            _context.next = 22;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](11);\n            _context.next = 21;\n            return store.dispatch('userLogout');\n\n          case 21:\n            next('/login');\n\n          case 22:\n            _context.next = 26;\n            break;\n\n          case 24:\n            //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n            //未登录去上面这些路由-----登录\n            toPath = to.path;\n\n            if (toPath.indexOf('/trade') != -1 || toPath.indexOf('/pay') != -1 || toPath.indexOf('/center') != -1) {\n              //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n              next('/login?redirect=' + toPath);\n            } else {\n              //去的不是上面这些路由（home|search|shopCart）---放行\n              next();\n            }\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 17]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default router;","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Vue_project/Project_vue/myproject/src/router/index.js"],"names":["VueRouter","Vue","routes","use","store","originPush","prototype","push","originReplace","replace","location","resolve","reject","call","router","scrollBehavior","to","from","savedPosition","y","beforeEach","next","token","state","user","name","userInfo","path","dispatch","toPath","indexOf"],"mappings":"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","sourcesContent":["//引入vue-router路由插件\nimport VueRouter from \"vue-router\";\n//引入Vue\nimport Vue from \"vue\";\nimport routes from \"./routes\";\n//使用插件\nVue.use(VueRouter);\n//引入store\nimport store from \"@/store\";\n//需要重写VueRouter.prototype原型对象身上的push|replace方法\n//先把VueRouter.prototype身上的push|replace方法进行保存一份\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n//重写VueRouter.prototype身上的push方法了\nVueRouter.prototype.push = function(location, resolve, reject) {\n  //第一个形参：路由跳转的配置对象（query|params）\n  //第二个参数：undefined|箭头函数（成功的回调）\n  //第三个参数:undefined|箭头函数（失败的回调）\n  if (resolve && reject) {\n    //push方法传递第二个参数|第三个参数（箭头函数）\n    //originPush：利用call修改上下文，变为(路由组件.$router)这个对象，第二参数：配置对象、第三、第四个参数：成功和失败回调函数\n    originPush.call(this, location, resolve, reject);\n  } else {\n    //push方法没有产地第二个参数|第三个参数\n    originPush.call(\n      this,\n      location,\n      () => {},\n      () => {}\n    );\n  }\n};\n//重写VueRouter.prototype身上的replace方法了\nVueRouter.prototype.replace = function(location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(\n      this,\n      location,\n      () => {},\n      () => {}\n    );\n  }\n};\n//对外暴露VueRouter类的实例\nlet router = new VueRouter({\n  //配置路由\n  //第一:路径的前面需要有/(不是二级路由)\n  //路径中单词都是小写的\n  //component右侧V别给我加单引号【字符串：组件是对象（VueComponent类的实例）】\n  routes,\n  //滚动行为\n  scrollBehavior(to, from, savedPosition) {\n    //返回的这个y=0，代表的滚动条在最上方\n    return { y: 0 };\n  },\n});\n\n//全局守卫：前置守卫（在路由跳转之间进行判断）\nrouter.beforeEach(async (to, from, next) => {\n   //to:获取到要跳转到的路由信息\n   //from：获取到从哪个路由跳转过来来的信息\n   //next: next() 放行  next(path) 放行  \n   //方便测试 统一放行\n  //  next();\n  //获取仓库中的token-----可以确定用户是登录了\n   let token  = store.state.user.token;\n   let name = store.state.user.userInfo.name;\n   //用户登录了\n   if(token){\n     //已经登录而且还想去登录------不行\n     if(to.path==\"/login\"||to.path=='/register'){\n        next('/');\n     }else{\n       //已经登陆了,访问的是非登录与注册\n       //登录了且拥有用户信息放行\n       if(name){\n         next();\n       }else{\n         //登陆了且没有用户信息\n         //在路由跳转之前获取用户信息且放行\n         try {\n          await store.dispatch('getUserInfo');\n          next();\n         } catch (error) {\n           //token失效从新登录\n           await store.dispatch('userLogout');\n           next('/login')\n         }\n       }\n     }\n   }else{\n      //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n      //未登录去上面这些路由-----登录\n      let toPath = to.path;\n      if(toPath.indexOf('/trade')!=-1 || toPath.indexOf('/pay')!=-1||toPath.indexOf('/center')!=-1){\n        //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n        next('/login?redirect='+toPath);\n      }else{\n         //去的不是上面这些路由（home|search|shopCart）---放行\n         next();\n      }\n    \n   }\n});\n\nexport default router;\n"]},"metadata":{},"sourceType":"module"}