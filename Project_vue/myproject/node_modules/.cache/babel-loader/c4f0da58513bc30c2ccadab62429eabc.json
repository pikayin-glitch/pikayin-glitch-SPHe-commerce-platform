{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\n// 对axios进行二次封装\nimport axios from \"axios\";\nimport nprogress from \"nprogress\"; // 利用axios对象的方法create,去创建一个axios实例\n\nvar requests = axios.create({\n  // 基础路径.路径中会出现api\n  baseURL: \"/api\",\n  // 请求超时的时间\n  timeout: 5000\n}); // 请求拦截器,拦截请求,在请求发出前执行\n\nrequests.interceptors.request.use(function (config) {\n  // cohfig:[配置对象,对象里面有一个属性很重要,header请求头\n  return config;\n}); // 响应拦截器\n\nrequests.interceptors.response.use(function (res) {\n  // 成功的回调函数,服务器数据回来时开源检测到\n  return res.data;\n}, function (error) {\n  // 响应失败\n  return Promise.reject(new Error('faile'));\n});\nexport default requests;","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Project_vue/myproject/src/api/requests.js"],"names":["axios","nprogress","requests","create","baseURL","timeout","interceptors","request","use","config","response","res","data","error","Promise","reject","Error"],"mappings":";;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAEA;;AAEA,IAAMC,QAAQ,GAACF,KAAK,CAACG,MAAN,CAAa;AAExB;AACAC,EAAAA,OAAO,EAAC,MAHgB;AAIxB;AACAC,EAAAA,OAAO,EAAC;AALgB,CAAb,CAAf,C,CAQA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAACC,MAAD,EAAU;AACxC;AACA,SAAOA,MAAP;AACH,CAHD,E,CAKA;;AACAP,QAAQ,CAACI,YAAT,CAAsBI,QAAtB,CAA+BF,GAA/B,CAAmC,UAACG,GAAD,EAAO;AACtC;AACA,SAAOA,GAAG,CAACC,IAAX;AACH,CAHD,EAGE,UAACC,KAAD,EAAS;AACP;AACA,SAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAAP;AACH,CAND;AAQA,eAAed,QAAf","sourcesContent":["\r\n// 对axios进行二次封装\r\n\r\nimport axios from \"axios\";\r\nimport nprogress from \"nprogress\";\r\n\r\n// 利用axios对象的方法create,去创建一个axios实例\r\n\r\nconst requests=axios.create({\r\n\r\n    // 基础路径.路径中会出现api\r\n    baseURL:\"/api\",\r\n    // 请求超时的时间\r\n    timeout:5000,\r\n});\r\n\r\n// 请求拦截器,拦截请求,在请求发出前执行\r\nrequests.interceptors.request.use((config)=>{\r\n    // cohfig:[配置对象,对象里面有一个属性很重要,header请求头\r\n    return config\r\n})\r\n\r\n// 响应拦截器\r\nrequests.interceptors.response.use((res)=>{\r\n    // 成功的回调函数,服务器数据回来时开源检测到\r\n    return res.data;\r\n},(error)=>{\r\n    // 响应失败\r\n    return Promise.reject(new Error('faile'))\r\n})\r\n\r\nexport default requests"]},"metadata":{},"sourceType":"module"}