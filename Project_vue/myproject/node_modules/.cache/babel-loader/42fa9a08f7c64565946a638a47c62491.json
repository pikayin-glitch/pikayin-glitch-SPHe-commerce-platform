{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/\\u5C39\\u6728\\u661F\\u8FB0/Desktop/Project_vue/myproject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n// search模块的小仓库\nimport { reqCategoryList } from \"@/api\";\nimport { reqBannerList } from \"@/api\";\nimport { reqFloorList } from \"@/api\"; // 引入被封装的请求\n\nvar state = {\n  categoryList: [],\n  //初始值为数组\n  bannerList: [],\n  floorList: []\n};\nvar mutations = {\n  CATEGORYLIST: function CATEGORYLIST(state, categoryList) {\n    state.categoryList = categoryList;\n  },\n  GETBANNERLIST: function GETBANNERLIST(state, bannerList) {\n    state.bannerList = bannerList;\n  },\n  GETFLOORLIST: GETFLOORLIST\n};\nvar actions = {\n  categoryList: function categoryList(context) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return reqCategoryList();\n\n            case 2:\n              result = _context.sent;\n\n              if (result.code == 200) //200为成功代码\n                {\n                  context.commit(\"CATEGORYLIST\", result.data);\n                }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  // 获取首页轮播图\n  getBannerList: function getBannerList(context) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return reqBannerList();\n\n            case 2:\n              result = _context2.sent;\n\n              if (result.code == 200) //200为成功代码\n                {\n                  context.commit(\"GETBANNERLIST\", result.data);\n                }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  getFloorList: function getFloorList(context) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return reqFloorList();\n\n            case 2:\n              result = _context3.sent;\n\n              if (result.code == 200) //200为成功代码\n                {\n                  context.commit(\"GETFLOORLIST\", result.data);\n                }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n};\nvar getters = {};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Project_vue/myproject/src/store/home.js"],"names":["reqCategoryList","reqBannerList","reqFloorList","state","categoryList","bannerList","floorList","mutations","CATEGORYLIST","GETBANNERLIST","GETFLOORLIST","actions","context","result","code","commit","data","getBannerList","getFloorList","getters"],"mappings":";;AAAA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAAQC,aAAR,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,OAA7B,C,CACA;;AACA,IAAMC,KAAK,GAAC;AACRC,EAAAA,YAAY,EAAC,EADL;AACQ;AAChBC,EAAAA,UAAU,EAAC,EAFH;AAGRC,EAAAA,SAAS,EAAC;AAHF,CAAZ;AAKA,IAAMC,SAAS,GAAC;AACZC,EAAAA,YADY,wBACCL,KADD,EACOC,YADP,EACoB;AAC5BD,IAAAA,KAAK,CAACC,YAAN,GAAmBA,YAAnB;AACH,GAHW;AAIZK,EAAAA,aAJY,yBAIEN,KAJF,EAIQE,UAJR,EAImB;AAC3BF,IAAAA,KAAK,CAACE,UAAN,GAAiBA,UAAjB;AACH,GANW;AAOZK,EAAAA,YAAY,EAAZA;AAPY,CAAhB;AASA,IAAMC,OAAO,GAAC;AACJP,EAAAA,YADI,wBACSQ,OADT,EACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACPZ,eAAe,EADR;;AAAA;AACpBa,cAAAA,MADoB;;AAExB,kBAAGA,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;AACpB;AACIF,kBAAAA,OAAO,CAACG,MAAR,CAAe,cAAf,EAA8BF,MAAM,CAACG,IAArC;AACH;;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM1B,GAPS;AAQV;AACMC,EAAAA,aATI,yBASUL,OATV,EASkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACJX,aAAa,EADT;;AAAA;AAClBY,cAAAA,MADkB;;AAEtB,kBAAGA,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;AACpB;AACIF,kBAAAA,OAAO,CAACG,MAAR,CAAe,eAAf,EAA+BF,MAAM,CAACG,IAAtC;AACH;;AALqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM3B,GAfS;AAiBJE,EAAAA,YAjBI,wBAiBSN,OAjBT,EAiBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACLV,YAAY,EADP;;AAAA;AACnBW,cAAAA,MADmB;;AAEvB,kBAAGA,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;AACpB;AACIF,kBAAAA,OAAO,CAACG,MAAR,CAAe,cAAf,EAA8BF,MAAM,CAACG,IAArC;AACH;;AALsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM5B;AAvBW,CAAd;AA0BA,IAAMG,OAAO,GAAC,EAAd;AAGA,eAAe;AACXhB,EAAAA,KAAK,EAALA,KADW;AAEXI,EAAAA,SAAS,EAATA,SAFW;AAGXI,EAAAA,OAAO,EAAPA,OAHW;AAIXQ,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["// search模块的小仓库\r\nimport { reqCategoryList } from \"@/api\";\r\nimport {reqBannerList} from \"@/api\"\r\nimport { reqFloorList } from \"@/api\";\r\n// 引入被封装的请求\r\nconst state={\r\n    categoryList:[],//初始值为数组\r\n    bannerList:[],\r\n    floorList:[]\r\n};\r\nconst mutations={\r\n    CATEGORYLIST(state,categoryList){\r\n        state.categoryList=categoryList\r\n    },\r\n    GETBANNERLIST(state,bannerList){\r\n        state.bannerList=bannerList\r\n    },\r\n    GETFLOORLIST\r\n}; \r\nconst actions={\r\n    async categoryList(context){\r\n       let result=await reqCategoryList();\r\n       if(result.code==200)//200为成功代码\r\n       {\r\n           context.commit(\"CATEGORYLIST\",result.data);\r\n       }\r\n    },\r\n    // 获取首页轮播图\r\n    async getBannerList(context){\r\n          let result= await reqBannerList();\r\n          if(result.code==200)//200为成功代码\r\n          {\r\n              context.commit(\"GETBANNERLIST\",result.data);\r\n          }\r\n    },\r\n\r\n    async getFloorList(context){\r\n        let result= await reqFloorList();\r\n        if(result.code==200)//200为成功代码\r\n        {\r\n            context.commit(\"GETFLOORLIST\",result.data);\r\n        }\r\n  }\r\n};\r\n\r\nconst getters={\r\n\r\n};\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"]},"metadata":{},"sourceType":"module"}