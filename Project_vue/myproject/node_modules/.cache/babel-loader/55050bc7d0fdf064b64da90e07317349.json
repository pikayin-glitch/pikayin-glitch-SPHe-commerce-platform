{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/\\u5C39\\u6728\\u661F\\u8FB0/Desktop/Vue_project/Project_vue/myproject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqGoodsInfo, reqAddOrUpdateShopCart } from \"@/api\"; //封装游客身份模块uuid--->生成一个随机字符串（不能在变了）\n\nimport { getUUID } from '@/utils/uuid_token';\nvar state = {\n  goodInfo: {},\n  //游客临时身份\n  uuid_token: getUUID()\n};\nvar mutations = {\n  GETGOODINFO: function GETGOODINFO(state, goodInfo) {\n    state.goodInfo = goodInfo;\n  }\n};\nvar actions = {\n  //获取产品信息的action\n  getGoodInfo: function getGoodInfo(_ref, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqGoodsInfo(skuId);\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit(\"GETGOODINFO\", result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //加入购物车的||修改某一个产品的个数\n  addOrUpdateShopCart: function addOrUpdateShopCart(_ref2, _ref3) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, skuId, skuNum, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              skuId = _ref3.skuId, skuNum = _ref3.skuNum;\n              _context2.next = 4;\n              return reqAddOrUpdateShopCart(skuId, skuNum);\n\n            case 4:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", \"ok\");\n\n            case 9:\n              return _context2.abrupt(\"return\", Promise.reject(new Error(\"faile\")));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n}; //简化数据而生\n\nvar getters = {\n  //路径导航简化的数据\n  categoryView: function categoryView(state) {\n    //比如:state.goodInfo初始状态空对象，空对象的categoryView属性值undefined\n    //当前计算出的 categoryView属性值至少是一个空对象，假的报错不会有了。\n    return state.goodInfo.categoryView || {};\n  },\n  //简化产品信息的数据\n  skuInfo: function skuInfo(state) {\n    return state.goodInfo.skuInfo || {};\n  },\n  //产品售卖属性的简化\n  spuSaleAttrList: function spuSaleAttrList(state) {\n    return state.goodInfo.spuSaleAttrList || [];\n  }\n};\nexport default {\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};","map":{"version":3,"sources":["C:/Users/尹木星辰/Desktop/Vue_project/Project_vue/myproject/src/store/detail.js"],"names":["reqGoodsInfo","reqAddOrUpdateShopCart","getUUID","state","goodInfo","uuid_token","mutations","GETGOODINFO","actions","getGoodInfo","skuId","commit","result","code","data","addOrUpdateShopCart","skuNum","Promise","reject","Error","getters","categoryView","skuInfo","spuSaleAttrList"],"mappings":";;;;AAAA,SAASA,YAAT,EAAuBC,sBAAvB,QAAqD,OAArD,C,CACA;;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,IAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAE,EADE;AAEZ;AACCC,EAAAA,UAAU,EAACH,OAAO;AAHP,CAAd;AAKA,IAAMI,SAAS,GAAG;AAChBC,EAAAA,WADgB,uBACJJ,KADI,EACGC,QADH,EACa;AAC3BD,IAAAA,KAAK,CAACC,QAAN,GAAiBA,QAAjB;AACD;AAHe,CAAlB;AAKA,IAAMI,OAAO,GAAG;AACd;AACMC,EAAAA,WAFQ,6BAEgBC,KAFhB,EAEuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBC,cAAAA,MAAiB,QAAjBA,MAAiB;AAAA;AAAA,qBAChBX,YAAY,CAACU,KAAD,CADI;;AAAA;AAC/BE,cAAAA,MAD+B;;AAEnC,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACtBF,gBAAAA,MAAM,CAAC,aAAD,EAAgBC,MAAM,CAACE,IAAvB,CAAN;AACD;;AAJkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpC,GAPa;AAQd;AACMC,EAAAA,mBATQ,6CAS2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7BJ,cAAAA,MAA6B,SAA7BA,MAA6B;AAAjBD,cAAAA,KAAiB,SAAjBA,KAAiB,EAAVM,MAAU,SAAVA,MAAU;AAAA;AAAA,qBAIpCf,sBAAsB,CAACS,KAAD,EAAQM,MAAR,CAJc;;AAAA;AAInDJ,cAAAA,MAJmD;;AAAA,oBAKnDA,MAAM,CAACC,IAAP,IAAe,GALoC;AAAA;AAAA;AAAA;;AAAA,gDAO9C,IAP8C;;AAAA;AAAA,gDAU9CI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAV8C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYxD;AArBa,CAAhB,C,CAuBA;;AACA,IAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,YAFc,wBAEDlB,KAFC,EAEM;AAClB;AACA;AACA,WAAOA,KAAK,CAACC,QAAN,CAAeiB,YAAf,IAA+B,EAAtC;AACD,GANa;AAOd;AACAC,EAAAA,OARc,mBAQNnB,KARM,EAQC;AACb,WAAOA,KAAK,CAACC,QAAN,CAAekB,OAAf,IAA0B,EAAjC;AACD,GAVa;AAWd;AACAC,EAAAA,eAZc,2BAYEpB,KAZF,EAYS;AACrB,WAAOA,KAAK,CAACC,QAAN,CAAemB,eAAf,IAAkC,EAAzC;AACD;AAda,CAAhB;AAgBA,eAAe;AACbpB,EAAAA,KAAK,EAALA,KADa;AAEbK,EAAAA,OAAO,EAAPA,OAFa;AAGbF,EAAAA,SAAS,EAATA,SAHa;AAIbc,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import { reqGoodsInfo, reqAddOrUpdateShopCart } from \"@/api\";\n//封装游客身份模块uuid--->生成一个随机字符串（不能在变了）\nimport {getUUID} from '@/utils/uuid_token';\nconst state = {\n  goodInfo: {},\n  //游客临时身份\n   uuid_token:getUUID()\n};\nconst mutations = {\n  GETGOODINFO(state, goodInfo) {\n    state.goodInfo = goodInfo;\n  },\n};\nconst actions = {\n  //获取产品信息的action\n  async getGoodInfo({ commit }, skuId) {\n    let result = await reqGoodsInfo(skuId);\n    if (result.code == 200) {\n      commit(\"GETGOODINFO\", result.data);\n    }\n  },\n  //加入购物车的||修改某一个产品的个数\n  async addOrUpdateShopCart({ commit }, { skuId, skuNum }) {\n    //发请求:前端带一些参数给服务器【需要存储这些数据】，存储成功了，没有给返回数据\n    //不需要在三连环（仓库存储数据了）\n    //注意:async函数执行返回的结果一定是一个promise【要么成功，要么失败】\n    let result = await reqAddOrUpdateShopCart(skuId, skuNum);\n    if (result.code == 200) {\n      //返回的是成功的标记\n      return \"ok\";\n    } else {\n      //返回的是失败的标记\n      return Promise.reject(new Error(\"faile\"));\n    }\n  },\n};\n//简化数据而生\nconst getters = {\n  //路径导航简化的数据\n  categoryView(state) {\n    //比如:state.goodInfo初始状态空对象，空对象的categoryView属性值undefined\n    //当前计算出的 categoryView属性值至少是一个空对象，假的报错不会有了。\n    return state.goodInfo.categoryView || {};\n  },\n  //简化产品信息的数据\n  skuInfo(state) {\n    return state.goodInfo.skuInfo || {};\n  },\n  //产品售卖属性的简化\n  spuSaleAttrList(state) {\n    return state.goodInfo.spuSaleAttrList || [];\n  },\n};\nexport default {\n  state,\n  actions,\n  mutations,\n  getters,\n};\n"]},"metadata":{},"sourceType":"module"}